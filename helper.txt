import.meta.env.VITE_API_KEY
  @media (max-width: 769px) {
  padding-top: 2rem;
  }
https://api.spoonacular.com/recipes/${params.name}/information?apiKey=${process.env.REACT_APP_API_KEY}


.mobile_wrapper {
    display: none;
    position: absolute;
    top: 67px;
    right: 1rem;
    width: 80%;
    /* margin-top: 1rem; */
}


  const [veggie, setVeggie] = useState([]);
  const [enable, setEnable] = useState(false);
  const [perPage, setPerPage] = useState(4);
  const [gap, setGap] = useState(3);

  const getVeggie = async () => {
    const response = await fetch(`https://api.spoonacular.com/recipes/random?apiKey=${import.meta.env.VITE_API_KEY}&number=9&tags=vegetarian`);
    const data = await response.json();
    // setVeggie(data.recipes);
    return data;
  };

  const onSuccess = (data) => {
    setVeggie(data.recipes);
    localStorage.setItem("veggie", JSON.stringify(data.recipes)); // set the cache data
  };

  useEffect(() => {
    const check = localStorage.getItem("veggie");
    if (check !== undefined) {
      setVeggie(JSON.parse(check)); // if has cache data, display cache data
      setEnable(false); // && no fetch new query
    } else {
      setEnable(!enable); // fetch query
    }
  }, [enable]);

  // fetch query
  const { isLoading } = useQuery(["veggie"], getVeggie, {
    enabled: enable, // upon cache data has or not
    onSuccess: onSuccess,
  });

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth <= 400) {
        setPerPage(2);
        setGap(1);
      } else if (window.innerWidth <= 768) {
        setPerPage(3);
        setGap(2);
      } else {
        setPerPage(4);
      }
    };

    window.addEventListener("resize", handleResize);

    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  if (isLoading) return <h1>Loading Veggie items</h1>;